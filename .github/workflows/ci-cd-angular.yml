name: PWA CI/CD Workflow

# Configuración de los desencadenadores
on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

# Definición de los trabajos (jobs)
jobs:
  test-integrations:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout código
        uses: actions/checkout@v4.2.1

      # Instalación de dependencias necesarias para Chrome headless
      - name: Instalar dependencias necesarias para Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libgconf-2-4 \
            libxss1 \
            libxi6 \
            libgdk-pixbuf2.0-0 \
            libgtk-3-0 \
            fonts-liberation \
            libappindicator3-1 \
            libasound2 \
            gconf-service \
            libgbm-dev

      # Configuración de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.X'  # Especifica la versión de Node.js

      # Instalación de Cypress
      - name: Instalar Cypress
        run: npm install cypress --save-dev

      # Ejecutar pruebas de Cypress en modo headless
      - name: Ejecutar pruebas de Cypress
        run: npx cypress run

  test-unitaries:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout código
        uses: actions/checkout@v4.2.1

      # Configuración de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.X'  # Especifica la versión de Node.js

      # Instalación de dependencias
      - name: Instalar dependencias
        run: |
          npm ci --legacy-peer-deps
          npm install -g testcafe --legacy-peer-deps  # Instala TestCafe globalmente

      # Ejecutar pruebas de TestCafe en modo headless sin pantalla, con reintento
      - name: Ejecutar pruebas de TestCafe
        run: |
          npx testcafe "chrome:headless --no-sandbox --disable-gpu --disable-dev-shm-usage --disable-software-rasterizer" test/test.js || npx testcafe "firefox:headless" test/test.js

  deploy-netlify:
    needs: [test-integrations, test-unitaries] # Solo se ejecuta si las pruebas pasan
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout código
        uses: actions/checkout@v4.2.1

      # Configuración de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.X'

      # Instalación de dependencias
      - name: Instalar dependencias
        run: npm install

      # Compilar la aplicación Angular
      - name: Build Angular app
        run: npm run build -- --output-path=dist

      # Desplegar en Netlify
      - name: Deploy to Netlify
        uses: netlify/actions-cli@v2.1.0
        with:
          args: deploy --dir=dist/[nombre-del-proyecto] --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
